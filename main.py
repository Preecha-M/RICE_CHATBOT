from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import JSONResponse
from linebot import LineBotApi, WebhookHandler
from linebot.models import (
    MessageEvent, ImageMessage, TextMessage, TextSendMessage, LocationMessage,
    TemplateSendMessage, ButtonsTemplate, PostbackAction, PostbackEvent
)
from gradio_client import Client, handle_file
from datetime import datetime, timedelta

import os
import json
import uvicorn

# LINE credentials
LINE_CHANNEL_ACCESS_TOKEN = "KbjaeoEXCN1kHwF0t4nxC6ErPY+BGapJGFcf663laX180ksXTjaOJXtBo0VWk3Zw/YBSvg6cpHMZkBEOs55+J4PZIpKrntHkase5Xz/B0MMS5Bm3cezHztwMlzmP9vY6cKzwixqQQrrfxR2AWI+2QwdB04t89/1O/w1cDnyilFU="
LINE_CHANNEL_SECRET = "2cf4efbc5245333f341f7734c5c1c35a"

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
gr_client = Client("Teayear/Rice")

app = FastAPI()

# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ "Location" ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Location
user_pending_location_naming = {}

# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà "Image + Location" ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ
user_pending_naming = {}

# ========== API Weather  ==========
import requests
from datetime import datetime

def weather_condition_label(code):
    table = {
        1: "‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á (Clear)",
        2: "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (Partly cloudy)",
        3: "‡πÄ‡∏°‡∏Ü‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏≤‡∏Å (Cloudy)",
        4: "‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å (Overcast)",
        5: "‡∏ù‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (Light rain)",
        6: "‡∏ù‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (Moderate rain)",
        7: "‡∏ù‡∏ô‡∏´‡∏ô‡∏±‡∏Å (Heavy rain)",
        8: "‡∏û‡∏≤‡∏¢‡∏∏‡∏ù‡∏ô‡∏ü‡πâ‡∏≤‡∏Ñ‡∏∞‡∏ô‡∏≠‡∏á (Thunderstorm)",
        9: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î (Very cold)",
        10: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏´‡∏ô‡∏≤‡∏ß (Cold)",
        11: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô (Hot)",
        12: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î (Very hot)"
    }
    return table.get(code, f"Unknown ({code})")


async def fetch_api_data(date: str, lat: str, lon: str):
    url = "https://data.tmd.go.th/nwpapi/v1/forecast/location/hourly/at"  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ /hourly/at ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á hourly ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà daily
    querystring = {
        "lat": lat,
        "lon": lon,
        "fields": "tc,rh,rain,slp,ws10m,wd10m,cloudlow,cloudmed,cloudhigh,cond",
        "date": date,
        "duration": "1"
    }
    headers = {
        "accept": "application/json",
        "Authorization": "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImM4OTllMTViMWMxMjRlN2U2ZjdiZmZkNWI3MTllY2RkOWI0NjM5OTM3MDczODk4YmNjYjhhMzI0MDJjZGEzYzFiZDMwMTA5YjVhY2I5ODdhIn0.eyJhdWQiOiIyIiwianRpIjoiYzg5OWUxNWIxYzEyNGU3ZTZmN2JmZmQ1YjcxOWVjZGQ5YjQ2Mzk5MzcwNzM4OThiY2NiOGEzMjQwMmNkYTNjMWJkMzAxMDliNWFjYjk4N2EiLCJpYXQiOjE3NTA1ODc0NDcsIm5iZiI6MTc1MDU4NzQ0NywiZXhwIjoxNzgyMTIzNDQ3LCJzdWIiOiI0MDMwIiwic2NvcGVzIjpbXX0.h4u9XYN8rZn9gkiY2GD5pCzTCsYANEhDGVUNPXZDxUOYjh2T8HK_TCEb7YGTd933Vrz4LAKzTNChz7zy8Bqffa9NrNagHajIukIiNFujPKicIvzLag_gwodHPvgQ_YDMsoTgQzCk-ysZnqGYoKZiSHORWE6Gp6ohzb5a-bBh2-F0M7CaAiX7ziy508sgCjWarJXOKQd_Re_WmJCS7SB99n95-idB12IGzF8s_CVpNvznnMdDrSb-HIZVyLTQhSZArTjXHSS6FWQA18LyoZje1xBfQwNwFcopum4mirJrdI3vGk4HcPQ1G5zjZcAAbZ_NuLZuq_1a5eUJq7mIp-3Q753vCiCnTDICVwKjhV3UcEzkSsKHCRUXycR7BdvTjDKnrv3WyJuse5-9M3_ofr2dbD4GS7RR2cxO3SrPOnt5KfQwuSzlXd0QCIbBwIat2dWOEMx9CeQqhxmF9un0DfgnBLhGJ2vZF6mYmgx0hODq2PvW_7Ae7-nmhTryc-qoGASZ0RCCks1gWHRHDM0W7UOgNh86MdEonSB3rzHyeI4KvosECxyGkuTyV6NHYejdwKzloQXVoPGKXEjpWjA_OmFYXn76b8VKhQSr3zt3trOB4FMEfzbZZiBLCs980dxg7513kLSTJdt2lEYRroLALlY_jXoH2rUa50VAsMpyZEVaUmc"
    }
    try:
        response = requests.get(url, headers=headers, params=querystring)
        print("[DEBUG]", response.status_code, response.text)
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": f"API error: {response.status_code} - {response.text}"}
    except Exception as e:
        return {"error": str(e)}

# ========== FastAPI Callback ==========

@app.post("/callback")
async def callback(request: Request, background_tasks: BackgroundTasks):
    body = await request.body()
    signature = request.headers.get('x-line-signature')
    background_tasks.add_task(handle_events, body, signature)
    return JSONResponse(content={"message": "OK"}, status_code=200)

def handle_events(body, signature):
    try:
        handler.handle(body.decode('utf-8'), signature)
    except Exception as e:
        print(f"Handle error: {e}")

def remove_expired_requests():
    now = datetime.now()
    expired_keys = []
    for user_id, data in user_pending_location_request.items():
        ts = datetime.fromisoformat(data["timestamp"])
        if now - ts > timedelta(minutes=EXPIRY_MINUTES):
            expired_keys.append(user_id)
    for key in expired_keys:
        del user_pending_location_request[key]
        
# ========== Gemini API             ==========

import google.generativeai as genai
import mimetypes

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gemini API
genai.configure(api_key="AIzaSyBHTMLZ0Mp9AVhTWYFWL-ALxcBiwHswHvQ")
client = genai.GenerativeModel("gemini-1.5-flash")

def is_image(file_path):
    mime_type, _ = mimetypes.guess_type(file_path)
    return mime_type and mime_type.startswith("image")

def analyze_input(input_data):
    try:
        if os.path.exists(input_data) and is_image(input_data):
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            my_file = genai.upload_file(input_data)
            prompt = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏ß‡∏á‡∏Ç‡πâ‡∏≤‡∏ß‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡πÉ‡∏ä‡πà' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            response = client.generate_content([my_file, prompt])
        else:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            contents = [f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏ï‡∏£‡∏Ç‡πâ‡∏≤‡∏ß
‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:
- ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡πÇ‡∏£‡∏Ñ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏ß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏Å‡∏©‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πã‡∏¢ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ' 

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {input_data}"""]
            response = client.generate_content(contents)
        return response.text
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"


# ========== Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Location ==========

@handler.add(MessageEvent, message=LocationMessage)
def handle_location(event):
    user_id = event.source.user_id
    latitude = event.message.latitude
    longitude = event.message.longitude
    address = event.message.address

    save_temp_location(user_id, latitude, longitude, address)
    update_location_in_userdata(user_id, latitude, longitude, address)

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(
            text=f"‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß!\nüìç {address}\n‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î: {latitude}\n‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î: {longitude}\n\n‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ"
        )
    )


def save_temp_location(user_id, latitude, longitude, address):
    os.makedirs("temp_location", exist_ok=True)
    filepath = f"temp_location/{user_id}.json"

    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
    else:
        data = []

    data.append({
        "latitude": latitude,
        "longitude": longitude,
        "address": address,
        "timestamp": datetime.now().isoformat()
    })

    with open(filepath, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def save_direct_to_userdata(user_id, image_path, result):
    os.makedirs("userdata", exist_ok=True)
    save_path = f"userdata/{user_id}.json"

    profile = line_bot_api.get_profile(user_id)
    display_name = profile.display_name

    record = {
        "user_id": user_id,
        "display_name": display_name,
        "image_path": image_path,
        "prediction": result,
        "timestamp": datetime.now().isoformat(),
        "address": "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
        "latitude": None,
        "longitude": None
    }

    if os.path.exists(save_path):
        with open(save_path, "r", encoding="utf-8") as f:
            records = json.load(f)
    else:
        records = []

    records.append(record)

    with open(save_path, "w", encoding="utf-8") as f:
        json.dump(records, f, indent=4, ensure_ascii=False)

def update_location_in_userdata(user_id, latitude, longitude, address):
    save_path = f"userdata/{user_id}.json"
    if not os.path.exists(save_path):
        return

    with open(save_path, "r", encoding="utf-8") as f:
        records = json.load(f)

    if records:
        records[-1]["latitude"] = latitude
        records[-1]["longitude"] = longitude
        records[-1]["address"] = address

        with open(save_path, "w", encoding="utf-8") as f:
            json.dump(records, f, indent=4, ensure_ascii=False)

# ========== Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image ==========

# ‡πÄ‡∏û‡∏¥‡πà‡∏° dict ‡πÉ‡∏´‡∏°‡πà
user_pending_location_request = {}

@handler.add(MessageEvent, message=ImageMessage)
def handle_image(event):
    user_id = event.source.user_id
    message_content = line_bot_api.get_message_content(event.message.id)

    os.makedirs("static", exist_ok=True)
    image_path = f"static/{event.message.id}.jpg"
    with open(image_path, "wb") as f:
        for chunk in message_content.iter_content():
            f.write(chunk)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Gemini ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° try-except ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
    try:
        gemini_check = analyze_input(image_path)
        if "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà" in gemini_check.lower():
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="üö´ ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö")
            )
            return
    except Exception as e:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ Gemini ‡πÑ‡∏î‡πâ: {str(e)}")
        )
        return

    # ‚úÖ ‡∏´‡∏≤‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏Ç‡πâ‡∏≤‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Gradio
    result = gr_client.predict(
        image=handle_file(image_path),
        api_name="/predict"
    )

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á userdata ‡πÄ‡∏•‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    save_direct_to_userdata(user_id, image_path, result)

    # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡πà‡∏á location
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(
            text=f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:\n{result}\n\nüìç ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏≤‡πÑ‡∏´‡∏°?\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡πà‡∏á Location ‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ\n‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö"
        )
    )

# def save_temp_prediction(user_id, image_path, result):
#     os.makedirs("temp_prediction", exist_ok=True)
#     filepath = f"temp_prediction/{user_id}.json"

#     # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
#     profile = line_bot_api.get_profile(user_id)
#     display_name = profile.display_name

#     record = {
#         "user_id": user_id,
#         "display_name": display_name,
#         "image_path": image_path,
#         "prediction": result,
#         "timestamp": datetime.now().isoformat()
#     }

#     # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
#     if os.path.exists(filepath):
#         with open(filepath, "r", encoding="utf-8") as f:
#             data = json.load(f)
#     else:
#         data = []

#     data.append(record)

#     with open(filepath, "w", encoding="utf-8") as f:
#         json.dump(data, f, indent=4, ensure_ascii=False)

def ask_user_to_select_location(user_id, reply_token):
    filepath = f"temp_location/{user_id}.json"

    if not os.path.exists(filepath):
        line_bot_api.reply_message(
            reply_token,
            TextSendMessage(text="‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á location ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞")
        )
        return

    with open(filepath, "r", encoding="utf-8") as f:
        locations = json.load(f)

    buttons = []
    for loc in locations[-4:]:
        address = loc.get("address", "Unknown")
        latitude = loc.get("latitude")
        longitude = loc.get("longitude")
        action_data = json.dumps({
            "latitude": latitude,
            "longitude": longitude,
            "address": address
        })

        buttons.append(
            PostbackAction(label=address[:20], data=action_data)
        )

    template = ButtonsTemplate(
        title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û",
        text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
        actions=buttons
    )

    message = TemplateSendMessage(
        alt_text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
        template=template
    )

    line_bot_api.reply_message(reply_token, message)

# ========== Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Postback ==========

@handler.add(PostbackEvent)
def handle_postback(event):
    user_id = event.source.user_id
    selected_data = json.loads(event.postback.data)

    latitude = selected_data.get("latitude")
    longitude = selected_data.get("longitude")
    address = selected_data.get("address")

    prediction_path = f"temp_prediction/{user_id}.json"
    if not os.path.exists(prediction_path):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡πà‡∏∞")
        )
        return

    with open(prediction_path, "r", encoding="utf-8") as f:
        data_list = json.load(f)

    # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latest_data = data_list[-1]

    user_pending_naming[user_id] = {
        "image_path": latest_data.get("image_path"),
        "prediction": latest_data.get("prediction"),
        "timestamp": latest_data.get("timestamp"),
        "latitude": latitude,
        "longitude": longitude,
        "address": address
    }

    # ‚úÖ ‡∏•‡∏ö record ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å temp
    data_list.pop()
    if data_list:
        with open(prediction_path, "w", encoding="utf-8") as f:
            json.dump(data_list, f, indent=4, ensure_ascii=False)
    else:
        os.remove(prediction_path)

    save_final_userdata(user_id, event.reply_token)

# ========== Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Text ==========

# @handler.add(MessageEvent, message=TextMessage)
# def handle_text(event):
#     user_id = event.source.user_id
#     user_text = event.message.text.strip()

#     # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Location
#     if user_id in user_pending_location_naming:
#         filepath = f"temp_location/{user_id}.json"

#         if os.path.exists(filepath):
#             with open(filepath, "r", encoding="utf-8") as f:
#                 locations = json.load(f)

#             if user_text not in ["‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠", "‡πÑ‡∏°‡πà", "no", "No"]:
#                 locations[-1]["address"] = user_text  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç address ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

#             with open(filepath, "w", encoding="utf-8") as f:
#                 json.dump(locations, f, indent=4, ensure_ascii=False)

#             reply = f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô: {user_text}" if user_text not in ["‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠", "‡πÑ‡∏°‡πà", "no", "No"] else "‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà LINE ‡∏™‡πà‡∏á‡∏°‡∏≤"
#             line_bot_api.reply_message(
#                 event.reply_token,
#                 TextSendMessage(text=reply)
#             )

#         del user_pending_location_naming[user_id]

@handler.add(MessageEvent, message=TextMessage)
def handle_text(event):
    user_text = event.message.text.strip()
    user_id = event.source.user_id

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    gemini_response = analyze_input(user_text)

    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=gemini_response)
    )


def save_final_userdata(user_id, reply_token):
    os.makedirs("userdata", exist_ok=True)
    save_path = f"userdata/{user_id}.json"

    temp_data = user_pending_naming[user_id]

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    profile = line_bot_api.get_profile(user_id)
    display_name = profile.display_name
    temp_data["display_name"] = display_name

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if os.path.exists(save_path):
        with open(save_path, "r", encoding="utf-8") as f:
            user_records = json.load(f)
    else:
        user_records = []

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    user_records.append(temp_data)

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    with open(save_path, "w", encoding="utf-8") as f:
        json.dump(user_records, f, indent=4, ensure_ascii=False)

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    line_bot_api.reply_message(
        reply_token,
        TextSendMessage(
            text=f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\nüë§ ‡∏ä‡∏∑‡πà‡∏≠: {display_name}\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {temp_data['address']}\n\nüîç ‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:\n{temp_data['prediction']}"
        )
    )

    del user_pending_naming[user_id]

# ========== WEB Dashboard ==========
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Template ‡πÅ‡∏•‡∏∞ Static files
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

from fastapi import Request
import glob

from collections import defaultdict
from datetime import datetime, timedelta

@app.get("/admin", response_class=HTMLResponse)
async def admin_dashboard(request: Request):
    selected_date = request.query_params.get("date") or datetime.now().strftime("%Y-%m-%d")
    selected_lat = request.query_params.get("lat") or "13.10"
    selected_lon = request.query_params.get("lon") or "100.10"
    page = int(request.query_params.get("page", 1))
    per_page = 5
    start = (page - 1) * per_page
    end = start + per_page

    max_date = (datetime.now() + timedelta(days=126)).strftime("%Y-%m-%d")

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ lat lon ‡πÑ‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    api_data = await fetch_api_data(selected_date, selected_lat, selected_lon)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á label mapping ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
    field_labels = {
        "tc": "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (¬∞C)",
        "rh": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (%)",
        "rain": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ù‡∏ô (mm)",
        "slp": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ó‡∏∞‡πÄ‡∏• (hPa)",
        "ws10m": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°‡∏ó‡∏µ‡πà 10 ‡πÄ‡∏°‡∏ï‡∏£ (m/s)",
        "wd10m": "‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏•‡∏°‡∏ó‡∏µ‡πà 10 ‡πÄ‡∏°‡∏ï‡∏£ (‡∏≠‡∏á‡∏®‡∏≤)",
        "cloudlow": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏°‡∏Ü‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡πà‡∏≥ (%)",
        "cloudmed": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏°‡∏Ü‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á (%)",
        "cloudhigh": "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏°‡∏Ü‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á (%)",
        "cond": "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
    }

# ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô list
# ‡∏™‡∏£‡πâ‡∏≤‡∏á weather_list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö daily
    weather_list = []
    if "WeatherForecasts" in api_data:
        for fc in api_data["WeatherForecasts"][0]["forecasts"]:
            entry = {
                "time": fc["time"],
                "data": []
            }
            for k, v in fc["data"].items():
                label = field_labels.get(k, k)
                if k == "cond":
                    v = weather_condition_label(int(v))
                entry["data"].append({
                    "label": label,
                    "value": v
                })
            weather_list.append(entry)

    # 2) ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userdata ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
    records = []
    user_ids = set()
    heat_data = []
    disease_by_location = defaultdict(lambda: defaultdict(int))
    all_diseases_set = set()

    for file_path in glob.glob("userdata/*.json"):
        with open(file_path, "r", encoding="utf-8") as f:
            content = json.load(f)
            user_data_list = content if isinstance(content, list) else [content]
            for data in user_data_list:
                data["user_id"] = os.path.basename(file_path).replace(".json", "")
                records.append(data)
                user_ids.add(data["user_id"])
                prediction_text = data.get("prediction", "")
                disease_line = prediction_text.split("\n")[0] if "\n" in prediction_text else prediction_text
                disease_name = disease_line.replace("üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:", "").strip()
                all_diseases_set.add(disease_name)
                location = data.get("address", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
                disease_by_location[location][disease_name] += 1
                if data.get("latitude") and data.get("longitude"):
                    heat_data.append([data["latitude"], data["longitude"], 1])

    all_diseases = sorted(all_diseases_set)
    location_list = sorted(disease_by_location.keys())
    datasets_for_chart = []
    for i, disease in enumerate(all_diseases):
        data_points = []
        for loc in location_list:
            data_points.append(disease_by_location[loc].get(disease, 0))
        datasets_for_chart.append({
            'label': disease,
            'data': data_points,
            'backgroundColor': f'rgba({(i*50)%255}, {(i*100)%255}, {(i*150)%255}, 0.6)'
        })

    location_counter = {loc: sum(counts.values()) for loc, counts in disease_by_location.items()}
    most_common_location = max(location_counter, key=location_counter.get, default="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    disease_summary = {disease: sum(disease_by_location[loc].get(disease, 0) for loc in location_list) for disease in all_diseases}

    summary = {
        "total_users": len(user_ids),
        "most_common_location": most_common_location,
        "disease_summary": disease_summary,
        "location_list": location_list,
        "datasets_for_chart": datasets_for_chart
    }
    
    paginated_records = records[start:end]
    total_pages = (len(records) + per_page - 1) // per_page

    return templates.TemplateResponse("dashboard.html", {
        "request": request,
        "records": paginated_records,
        "page": page,
        "total_pages": total_pages,
        "summary": summary,
        "heat_data": heat_data,
        "api_data": api_data,
        "selected_date": selected_date,
        "selected_lat": selected_lat,
        "selected_lon": selected_lon,
        "max_date": max_date,
        "weather_list": weather_list
    })

# ========== Guide ==========
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

app.mount("/guide_images", StaticFiles(directory="guide_images"), name="guide_images")
templates = Jinja2Templates(directory="templates")

@app.get("/guide", response_class=HTMLResponse)
async def get_guide_page(request: Request):
    return templates.TemplateResponse("guide.html", {"request": request})

# ========== Main ==========

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
